# Store-manager-api documentation
openapi: 3.0.0
info:
  version: 1.0.0
  title: Store Manager API
  description: This is the API documentation for the Store Manager application.
  contact:
    name: Lucas Ximenes
    email: lucasdximenes@gmail.com
    url: https://github.com/lucasdximenes
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Local server
tags:
  - name: products
    description: Product operations
  - name: sales
    description: Sale operations
paths:
  /products:
    get:
      tags:
        - products
      summary: Get all products
      description: Get all products
      operationId: getProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getProducts'
    post:
      tags:
        - products
      summary: Create a new product
      description: Create a new product
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProduct'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProduct'
        '400':
          description: Invalid input, name is required.
        '422':
          description: Name must be a string; Name length must be at least 5 characters long

  '/products/{productId}':
    get:
      tags:
        - products
      summary: Get a product by id
      description: Get a product by id
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProductById'
        '404':
          description: Product not found
        '422':
          description: ID must be a positive integer; ID must be a number
    put:
      tags:
        - products
      summary: Update a product by id
      description: Update a product by id
      operationId: updateProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProductById'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedProduct'
        '400':
          description: Invalid input, name is required.
        '404':
          description: Product not found
        '422':
          description: ID must be a positive integer; ID must be a number; Name must be a string; Name length must be at least 5 characters long
    delete:
      tags:
        - products
      summary: Delete a product by id
      description: Delete a product by id
      operationId: deleteProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Product not found
        '422':
          description: ID must be a positive integer; ID must be a number

  /products/search:
    get:
      tags:
        - products
      summary: Search for a product by name
      description: Search for a product by name
      operationId: searchProduct
      parameters:
        - name: q
          in: query
          description: Name of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: if query is empty, return all products; If product not found, return empty array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getProductByName'

  /sales:
    get:
      tags:
        - sales
      summary: Get all sales
      description: Get all sales
      operationId: getSales
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getSales'
    post:
      tags:
        - sales
      summary: Create a new sale
      description: Create a new sale
      operationId: createSale
      requestBody:
        description: Sale object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/createSale'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdSale'
        '400':
          description: Sales must be an array; Sales is empty; productId is required; quantity is required
        '404':
          description: Product not found
        '422':
          description: productId must be a positive integer; productId must be a number; quantity must be a positive integer; quantity must be a number

  '/sales/{saleId}':
    get:
      tags:
        - sales
      summary: Get a sale by id
      description: Get a sale by id
      operationId: getSaleById
      parameters:
        - name: saleId
          in: path
          description: ID of sale to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSaleById'
        '404':
          description: Sale not found
        '422':
          description: ID must be a positive integer; ID must be a number
    put:
      tags:
        - sales
      summary: Update a sale by id
      description: Update a sale by id
      operationId: updateSaleById
      parameters:
        - name: saleId
          in: path
          description: ID of sale to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Sale object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/updateSaleById'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedSale'
        '400':
          description: Sales must be an array; Sales is empty; productId is required; quantity is required
        '404':
          description: Sale not found; Product not found
        '422':
          description: ID must be a positive integer; ID must be a number; productId must be a positive integer; productId must be a number; quantity must be a positive integer; quantity must be a number
    delete:
      tags:
        - sales
      summary: Delete a sale by id
      description: Delete a sale by id
      operationId: deleteSaleById
      parameters:
        - name: saleId
          in: path
          description: ID of sale to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Sale not found
        '422':
          description: ID must be a positive integer; ID must be a number

components:
  schemas:
    getProducts:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Product 1'
    getProductById:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Product 1'
    getProductByName:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Product 1'
    createProduct:
      type: object
      properties:
        name:
          type: string
          example: 'Product 1'
    createdProduct:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Product 1'
    updateProductById:
      type: object
      properties:
        name:
          type: string
          example: 'Product 1'
    updatedProduct:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Product 1'
    getSales:
      type: object
      properties:
        saleId:
          type: integer
          format: int64
          example: 1
        date:
          type: string
          example: '2022-11-17T00:00:00.000Z'
        productId:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          format: int64
          example: 1
    getSaleById:
      type: object
      properties:
        date:
          type: string
          example: '2022-11-17T00:00:00.000Z'
        productId:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          format: int64
          example: 1
    createSale:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          format: int64
          example: 1
    createdSale:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        itemsSold:
          type: array
          items:
            type: object
            properties:
              productId:
                type: integer
                format: int64
                example: 1
              quantity:
                type: integer
                format: int64
                example: 1
    updateSaleById:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          format: int64
          example: 1
    updatedSale:
      type: object
      properties:
        saleId:
          type: integer
          format: int64
          example: 1
        itemsUpdated:
          type: array
          items:
            type: object
            properties:
              productId:
                type: integer
                format: int64
                example: 1
              quantity:
                type: integer
                format: int64
                example: 1
